export const lessons = [
  {
    numLessons: 2,
    issue: 'Java SE',
    day: 14,
    msg: `<small>‚ÄúEstas listo para aprender las lecciones que la vendran en vida‚Äù.<br>
    FRASES PARA SUPERAR EL S√çNDROME DEL IMPOSTOR </small>`,
    myProgress: 'ü•ö>üê£',

    exercise: [
      {
        numExercise: 1,
        title: '',
        description:`<small>Escribe un programa, utilizando para ello el paradigma de POO, que juegue
        con el usuario a adivinar un n√∫mero. Debe cumplir los siguientes
        requerimientos:
        
        <p>1. El ordenador debe generar un n√∫mero entre 1 y 500, y el usuario tiene
        que intentar adivinarlo.
        
        <p>2. Cada vez que el usuario introduce un valor, el ordenador debe decirle al
        usuario si el n√∫mero que tiene que adivinar es mayor o menor que el que
        ha introducido el usuario.
        
        <p>3. Cuando consiga adivinarlo, debe indic√°rselo e imprimir en pantalla el
        n√∫mero de veces que el usuario ha intentado adivinar el n√∫mero.
        
        <p>4. Si el usuario introduce algo que no es un n√∫mero, debe indicarlo en
        pantalla, y contarlo como un intento indicando que no ha conseguido
        reconocer la entrada lanzando la excepci√≥n InputMismatchException.`,
        urlCode: 'https://github.com/TECHMA-Bootcamp-FullStack-Java-Angular/dmb-tsys-java-1110-ta10/tree/main/src/com/tmbs/ta10_01',
        urlPG: '',
      },
      {
        numExercise: 2,
        title: '',
        description:  `<small>Escribe un programa , utilizando para ello el paradigma de P00, que lance y capture una excepci√≥n customizada.
        <p> Crea para ello una package diferente que puedas reutilizar para el resto de tus proyectos. 
        Recomendaciones:
        <li>El programa abre un bucle by{) en el que comienza mostrando un mensaje por pantalla.
        <li>A continuaci√≥n, crea un objeto de la clase Exception, indicando en su constructor un mensaje explicativo.
        El resultado debe ser simila`,
        urlCode: 'https://github.com/TECHMA-Bootcamp-FullStack-Java-Angular/dmb-tsys-java-1110-ta10/tree/main/src/com/tmbs/ta10_02',
        urlPG: ''
      },
      {
        numExercise: 3,
        title: '',
        description: `<small>Escribe un programa , utilizando para ello el paradigma de POO, que genere un n√∫mero aleatorio e indique si el n√∫mero generado es par o impar. <p>El programa utilizar√° para ello el lanzamiento de una excepci√≥n. 
        <p>Recomendaciones: 1. El programa utiliza la clase Random() para obtener un n√∫mero aleatorio entre O y 999 (por poner un rango cualquiera).
        <p>2. Se determina si el n√∫mero es par o impar y se lanza una excepci√≥n con el correspondiente mensaje para indicarlo (se limitar√° a mostrar el mensaje asociado a la excepci√≥n capturada)`,
        urlCode: 'https://github.com/TECHMA-Bootcamp-FullStack-Java-Angular/dmb-tsys-java-1110-ta10/tree/main/src/com/tmbs/ta10_03',
        urlPG: ''
      },
      {
        numExercise: 4,
        title: '',
        description: `<small>Escribe un programa , utilizando para ello el paradigma de POO, que nos permita realizar c√°lculos simples (suma, resta, multiplicaci√≥n, potencia, ra√≠z cuadrada, ra√≠z cubica y divisi√≥n). 
        <p>El programa ha des estar preparado para gestionar los posibles errores de calculo.
        <p>Has de utilizar para ello el control de excepciones de JAVA.
        <p>Recomendaciones: 1. Utiliza siempre que sea posible las Excepciones definidas en la API de lava 8. 2.
        <p>Puedes utilizar como interfaz visual Scanner o lOptionPane. 3. Estructura correctamente el c√≥digo en diferentes packages.`,
        urlCode: 'https://github.com/TECHMA-Bootcamp-FullStack-Java-Angular/dmb-tsys-java-1110-ta10/tree/main/src/com/tmbs/ta10_04',
        urlPG: ''
      },
      {
        numExercise: 5,
        title: '',
        description: `<small>Haz una clase llamada Password que siga las siguientes condiciones: 
        <li>Que tenga los atributos longitud y contrase√±a . Por defecto, la longitud sera de s. 
        <li>Los constructores ser√°n los siguiente: ‚úì Un constructor por defecto. ‚úì Un constructor con la longitud que nosotros le pasemos. Generara una contrase√±a aleatoria con esa longitud. Los m√©todos que implementa ser√°n: 
        <li>esFuerte(): devuelve un booleano si es fuerte o no, para que sea fuerte debe tener mas de 2 may√∫sculas, mas de 1 min√∫scula y mas de 5 n√∫meros. <li>generarPassword(): genera la contrase√±a del objeto con la longitud que tenga. M√©todo get para contrase√±a y longitud. M√©todo set para longitud.
        Ahora, crea una clase clase ejecutable:
        <li>‚Ä¢	Crea un array de Passwords con el tama√±o que tu le indiques por teclado y crea un bucle que cree un objeto para cada posici√≥n del array.
        <li>‚Ä¢	Indica tambi√©n por teclado la longitud de los Passwords (antes de bucle).
        <li>‚Ä¢	Crea otro array de booleanos donde se almacene si el password del array de Password es o no fuerte (usa el bucle anterior).
        Al final, muestra la contrase√±a y si es o no fuerte (usa el bucle anterior). Usa este simple formato:
        contrase√±al valor_booleanol contrase√±a2 valor bololeano2
        `,
        urlCode: 'https://github.com/TECHMA-Bootcamp-FullStack-Java-Angular/dmb-tsys-java-1110-ta10/tree/main/src/com/tmbs/ta10_05',
        urlPG: ''
      },
    ]
  },
]


 
